name: CI

on:
  push:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test app
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test

    steps:
      - uses: actions/checkout@v4

      - uses: erlef/setup-beam@v1
        id: beam
        with:
          version-file: .tool-versions
          version-type: strict

      - name: Restore the deps cache
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: deps
          key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-deps-mixlockhash-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-deps-

      - name: Restore the _build cache
        uses: actions/cache@v4
        id: build-cache
        with:
          path: _build
          key: ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-build-mixlockhash-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ env.MIX_ENV }}-build-

      - name: Install mix dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Compile dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.compile

      - name: Compile
        run: mix compile --warnings-as-errors --force

      - name: Check Formatting
        run: mix format --check-formatted

      - name: Credo
        run: mix credo

      - name: Run Tests
        run: mix test
  build:
    name: Build and push image to ghcr
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lowercase image name
        run: echo "IMAGE_NAME=$(echo "$IMAGE_NAME" | awk '{print tolower($0)}')" >> $GITHUB_ENV

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
  deploy:
      if: github.ref == 'refs/heads/main'
      name: Deploy app
      needs: build
      runs-on: ubuntu-latest
      steps:
      - name: Trigger deployment
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST ${{ secrets.WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -H "X-Signature: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{}')
          if [ "$RESPONSE" -ne "200" ]
          then
            echo "Deployment failed with status ${RESPONSE}"
            exit 1
          fi

